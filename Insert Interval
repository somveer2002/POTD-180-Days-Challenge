class Solution {
public:
    static bool myComp(const vector<int>& v1, const vector<int>& v2)
    {
        return v1[0] < v2[0];
    }
    vector<vector<int>> mergeInter(vector<vector<int>> &inter){
        sort(inter.begin(),inter.end(),myComp);
        vector<vector<int>> res;
        
        vector<int> tmp(2,0);
        tmp[0]=inter[0][0];
        tmp[1]=inter[0][1];
        for(int i=1;i<inter.size();i++){
            if(inter[i][0]<=tmp[1]){
                tmp[0]=min(tmp[0],inter[i][0]);
                tmp[1]=max(tmp[1],inter[i][1]);
            }
            else{
                res.push_back(tmp);
                tmp[0]=inter[i][0];
                tmp[1]=inter[i][1];
            }
        }
        res.push_back(tmp);
        return res;
    }
    vector<vector<int>> insert(vector<vector<int>>& inter, vector<int>& newInterval) {

        int n=inter.size();
        if(inter.size()==0){
            inter.push_back(newInterval);
            return inter;
        }
        if(newInterval.size()==0)
            return inter;
        vector<vector<int>> tmp;
        int st=newInterval[0],end=newInterval[1];
        int i;
        int flag=true;
        for(i=0;i<n;i++){
            if((st>=inter[i][0] && st<=inter[i][1])||(end>=inter[i][0] && end<=inter[i][1])){
                flag=false;
                inter[i][0]=min(inter[i][0],st);
                inter[i][1]=max(inter[i][1],end);
                tmp=mergeInter(inter);
                break;
            }
        }
        if(i==n && flag){
            for(int i=0;i<n;i++){
                if(st<inter[i][0] && flag){
                    flag=false;
                    tmp.push_back({st,end});
                }
                tmp.push_back(inter[i]);
            }
            if(tmp.size()==inter.size())
                tmp.push_back({st,end});
            tmp=mergeInter(tmp);
        }
        return tmp;
        // else
        //     return tmp;
    }
};
